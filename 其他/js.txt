1.原型 原型链
如何准确判断一个变量是数组类型？
Object.prototype.toString(t) === "[Object Array]"
t._proto_ === Array.prototype
Array.isArray()

描述new一个对象的过程

写一个原型链继承的的例子

2.作用域 闭包
	作用域：
		它是指对某一变量和方法具有访问权限的代码空间, 
		在JS中, 作用域是在函数中维护的。表示变量或函数起作用的区域，
		指代了它们在什么样的上下文中执行，亦即上下文执行环境。
		Javascript的作用域只有两种：全局作用域和本地作用域，本地作用域是按照函数来区分的。
		
	闭包：
		在js中函数嵌套函数，当内部函数在定义它的作用域的外部被引用时,
		就创建了该内部函数的闭包 ,如果内部函数引用了位于外部函数的变量,当外部函数调用完毕后,
		这些变量在内存不会被 释放,因为闭包需要它们.
		
		闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中，不会在f1调用后被自动清除。
		
	使用闭包要注意：
		1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，
		否则会造成网页的性能问题，在IE中可能导致内存泄露。
			解决方法是，在退出函数之前，将不使用的局部变量全部删除。
		2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，
		把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），
		这时一定要小心，不要随便改变父函数内部变量的值

3.异步单线程
	JavaScript引擎是单线程运行的,浏览器无论在什么时候都有且只有一个线程在运行JavaScript程序
	一、浏览器的内核是多线程的，
	它们在内核制控下相互配合以保持同步，一个浏览器至少实现三个常驻线程：
		javascript引擎线程，GUI渲染线程，浏览器事件触发线程。
		1. javascript引擎是基于事件驱动单线程执行的，JS引擎一直等待着任务队列中任务的到来，然后加以处理，浏览器无论什么时候都只有一个JS线程在运行JS程序。
		2. GUI渲染线程负责渲染浏览器界面，当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时,该线程就会执行。但需要注意 GUI渲染线程与JS引擎是互斥的，当JS引擎执行时GUI线程会被挂起，GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。
		3. 事件触发线程，当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。这些事件可来自JavaScript引擎当前执行的代码块如setTimeOut、也可来自浏览器内核的其他线程如鼠标点击、AJAX异步请求等，但由于JS的单线程关系所有这些事件都得排队等待JS引擎处理。（当线程中没有执行任何同步代码的前提下才会执行异步代码）

	题目1:同步和异步的区别是什么？分别举一个同步和异步的例子

	答案：同步（代码从上到下执行）会阻塞代码执行，而异步不会。 alert是同步的，而setTimeout是异步

	题目2：前端使用异步的场景有哪些

	答案：定时任务（setTimeout  setInterval） 网络请求 （ajax  动态<img>加载）事件绑定  回调函数

4.JS DOM操作
	题目1：DOM是哪种基本的数据结构
		答案：DOM是一种树形结构的数据结构

	题目2：DOM操作的常用API有哪些
		getElementById()	返回带有指定 ID 的元素。
		getElementsByTagName()	返回包含带有指定标签名称的所有元素的节点列表（集合/节点数组）。
		getElementsByClassName()	返回包含带有指定类名的所有元素的节点列表。
		appendChild()	把新的子节点添加到指定节点。
		removeChild()	删除子节点。
		replaceChild()	替换子节点。
		insertBefore()	在指定的子节点前面插入新的子节点。
		createAttribute()	创建属性节点。
		createElement()	创建元素节点。
		createTextNode()	创建文本节点。
		getAttribute()	返回指定的属性值。
		setAttribute()	把指定属性设置或修改为指定的值。

		题目3：DOM节点的Attribute和property有何区别
		 答案：property只是一个JS对象的属性的修改。（通过obox.name = xxx操作） Attribute是对html便签属性的修改

		题目4：如何检测浏览器的类型
		 答案：可以通过检测navigator.userAgent

		题目5：拆解url的各部分
		 答案：location.host           //主机加端口号
					location.hostname       //主机
					location.port           //端口号
					location.protocol       //协议
					location.pathname       //路径
					location.hash           //片段标识符，可以用于保存网页状态
					location.search         //返回问号后的字段

5.Ajax
	1、ajax的实现和原理(Asynchronous JavaScript and XML)
		原理：
	 		Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，
	 		然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。

		实现步骤：
			1.创建XMLHTTPRequest对象
			2.注册回调函数 xhr.onreadystatechange=callback;
			3.设置和服务器端的链接信息。xhr.open(http请求方式（get，post）,url,设置异步或同步方式交互（true,false）);
			4.发送数据开始交互。xhr.send(null); 
			5.接受响应数据。

	2、Ajax的优缺点
		Ajax的优点：
			1）最大的一点是页面无刷新，在页面内与服务器通信，给用户的体验非常好。
			2）使用异步方式与服务器通信，不需要打断用户的操作，具有更加迅速的响应能力。
			3）把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，
				减轻服务器和带宽的负担，节约空间和宽带租用成本。ajax的原则是“按需取数据”，
				可以最大程度的减少冗余请求，和响应对服务器造成的负担。
				
		　　Ajax的工作原理相当于在用户和服务器之间加了—个中间层(AJAX引擎),使用户操作与服务器响应异步化。
			  并不是所有的用户请求都提交给服务器,像—些数据验证和数据处理等都交给Ajax引擎自己来做,
			  只有确定需要从服务器读取新数据时再由Ajax引擎代为向服务器提交请求。
			4）基于标准化的并被广泛支持的技术，不需要下载插件或者小程序。

		Ajax的缺点：
			 　1）ajax干掉了back按钮，即对浏览器后退机制的破坏。
			   2）安全问题
				　　ajax技术就如同对企业数据建立了一个直接通道。这使得开发者在不经意间会暴露比以前更多的数据和服务器逻辑。
				    ajax的逻辑可以对客户端的安全扫描技术隐藏起来，允许黑客从远端服务器上建立新的攻击。
			   3）对搜索引擎的支持比较弱
			   4）一些手持设备（如手机、PDA等）现在还不能很好的支持ajax
			   
	3、AJAX机制，open的参数是什么
	机制见1原理部分：
	open()有三个参数，第一个是要发送的请求类型（get或post），第二个：请求的URL  第三个：是否异步发送请求的布尔值
	
	fetch,超时处理
	{ 
	   method: 'GET',
     headers: myHeaders,
     mode: 'cors',
     cache: 'default',
     body:""
  };
  
  在请求后的 Response 中，具体的定义在 这里。
  常用的有：
		Response.status 也就是 StatusCode，如成功就是 200；
		Response.statusText 是 StatusCode 的描述文本，如成功就是 OK；
		Response.ok 一个 Boolean 类型的值，判断是否正常返回，也就是 StatusCode 为 200-299。
		Body 参数
		因为在 Request 和 Response 中都包含 Body 的实现，所以包含以下类型：
			ArrayBuffer
			ArrayBufferView (Uint8Array and friends)
			Blob/File
			string
			URLSearchParams
			FormData
		在 fetch 中实现了对应的方法，并返回的都是 Promise 类型。
			arrayBuffer()
			blob()
			json()
			text()
			formData()

	4、说说对Ajax的理解，怎么实现局部刷新，怎么将获取到的JSON 数据在页面中显示出来，JSON 序列化成了字符串后应该怎么处理

		 局部刷新：从服务器获得数据，然后用javascript来操作DOM而更新页面
 
		 如果返回的是JSON数据，
				1. var str=xhr.responseText; 获取响应数据
				2. var obj=JSON.parse(str); 解析JSON数据成为JS对象
				3. 操作JS对象

	5、请解释 JSONP 的工作原理，以及它为什么不是真正的 AJAX

		由于同源策略的限制，XmlHttpRequest只允许请求当前源（域名、协议、端口）的资源，为了实现跨域请求，可以通过script标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求。

		为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。

		Jsonp原理： 
		首先在客户端注册一个callback, 然后把callback的名字传给服务器。
		此时，服务器先生成 json 数据。然后将这个callback参数作为函数名来包裹住JSON数据，返回给客户端。
		客户端浏览器，动态执行回调函数，将返回的数据作为参数，传入到了客户端预先定义好的 callback 函数里.

		ajax和jsonp这两种技术在调用方式上“看起来”很像，目的也一样，都是请求一个url，然后把服务器返回的数据进行处理，因此jquery和ext等框架都把jsonp作为ajax的一种形式进行了封装；但ajax和jsonp其实本质上是不同的东西。ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<script>标签来调用服务器提供的js脚本。所以说，其实ajax与jsonp的区别不在于是否跨域，ajax通过服务端代理一样可以实现跨域，jsonp本身也不排斥同域的数据的获取。还有就是，jsonp是一种方式或者说非强制性协议，如同ajax一样，它也不一定非要用json格式来传递数据，如果你愿意，字符串都行，只不过这样不利于用jsonp提供公开服务。

		缺陷：

		第一，也是最重要的一点，没有关于 JSONP 调用的错误处理。如果动态脚本插入有效，就执行调用；如果无效，就静默失败。失败是没有任何提示的。例如，不能从服务器捕捉到 404 错误，也不能取消或重新开始请求。不过，等待一段时间还没有响应的话，就不用理它了。（未来的 jQuery 版本可能有终止 JSONP 请求的特性）。

		JSONP 的另一个主要缺陷是被不信任的服务使用时会很危险。因为 JSONP 服务返回打包在函数调用中的 JSON 响应，而函数调用是由浏览器执行的，这使宿主 Web 应用程序更容易受到各类攻击。如果打算使用 JSONP 服务，了解它能造成的威胁非常重要。
		 

		JSONP (JSON with Padding)是一个简单高效的跨域方式，HTML中的script标签可以加载并执行其他域的javascript，于是我们可以通过script标记来动态加载其他域的资源。例如我要从域A的页面pageA加载域B的数据，那么在域B的页面pageB中我以JavaScript的形式声明pageA需要的数据，然后在 pageA中用script标签把pageB加载进来，那么pageB中的脚本就会得以执行。JSONP在此基础上加入了回调函数，pageB加载完之后会执行pageA中定义的函数，所需要的数据会以参数的形式传递给该函数。JSONP易于实现，但是也会存在一些安全隐患，如果第三方的脚本随意地执行，那么它就可以篡改页面内容，截获敏感数据。但是在受信任的双方传递数据，JSONP是非常合适的选择。

6. 事件绑定
   什么是事件冒泡,
   stopPropagation()
   prventEvent()
   
7. 版本管理(git)
8. 模块化
9. 打包工具(webpack)

前端安全

性能优化
1. 请减少HTTP请求

基本原理：

在浏览器(客户端)和服务器发生通信时，就已经消耗了大量的时间，尤其是在网络情况比较糟糕的时候，这个问题尤其的突出。

一个正常HTTP请求的流程简述：如在浏览器中输入"www.xxxxxx.com"并按下回车，浏览器再与这个URL指向的服务器建立连接，然后浏览器才能向服务器发送请求信息，服务器在接受到请求的信息后再返回相应的信息，浏览器接收到来自服务器的应答信息后，对这些数据解释执行。

而当我们请求的网页文件中有很多图片、CSS、JS甚至音乐等信息时，将会频繁的与服务器建立连接，与释放连接，这必定会造成资源的浪费，且每个HTTP请求都会对服务器和浏览器产生性能负担。

网速相同的条件下，下载一个100KB的图片比下载两个50KB的图片要快。所以，请减少HTTP请求。

解决办法：

合并图片（css sprites），合并CSS和JS文件；图片较多的页面也可以使用 lazyLoad 等技术进行优化。
2. 请正确理解 Repaint 和 Reflow

注：Repaint 和 Reflow 也就是重绘和重排，请允许我在这卖弄下我有限认识的那么几个英语单词...囧

基本原理：

Repaint(重绘)就是在一个元素的外观被改变，但没有改变布局(宽高)的情况下发生，如改变visibility、outline、背景色等等。

Reflow(重排)就是DOM的变化影响到了元素的几何属性（宽和高），浏览器会重新计算元素的几何属性，会使渲染树中受到影响的部分失效，浏览器会验证DOM树上的所有其它结点的visibility属性，这也是Reflow低效的原因。如：改变窗囗大小、改变文字大小、内容的改变、浏览器窗口变化，style属性的改变等等。如果Reflow的过于频繁，CPU使用率就会噌噌的往上涨，所以前端也就有必要知道 Repaint 和 Reflow的知识。

减少性能影响的办法：

上面提到通过设置style属性改变结点样式的话，每设置一次都会导致一次reflow，所以最好通过设置class的方式； 有动画效果的元素，它的position属性应当设为fixed或absolute，这样不会影响其它元素的布局；如果功能需求上不能设置position为fixed或absolute，那么就权衡速度的平滑性。

总之，因为 Reflow 有时确实不可避免，所以只能尽可能限制Reflow的影响范围。
3. 请减少对DOM的操作

基本原理：

对DOM操作的代价是高昂的，这在网页应用中的通常是一个性能瓶颈。

天生就慢。在《高性能JavaScript》中这么比喻：“把DOM看成一个岛屿，把JavaScript(ECMAScript)看成另一个岛屿，两者之间以一座收费桥连接”。所以每次访问DOM都会教一个过桥费，而访问的次数越多，交的费用也就越多。所以一般建议尽量减少过桥次数。

解决办法：

修改和访问DOM元素会造成页面的Repaint和Reflow，循环对DOM操作更是罪恶的行为。所以请合理的使用JavaScript变量储存内容，考虑大量DOM元素中循环的性能开销，在循环结束时一次性写入。

减少对DOM元素的查询和修改，查询时可将其赋值给局部变量。

注：在IE中:hover会降低响应速度。
4. 使用JSON格式来进行数据交换

基本原理：

JSON是一种轻量级的数据交换格式，采用完全独立于语言的文本格式，是理想的数据交换格式。同时，JSON是 JavaScript原生格式，这意味着在 JavaScript 中处理 JSON数据不需要任何特殊的 API 或工具包。

与XML序列化相比，JSON序列化后产生的数据一般要比XML序列化后数据体积小，所以在Facebook等知名网站中都采用了JSON作为数据交换方式。

JS操作JSON：

在JSON中，有两种结构： 对象和数组。

1. 一个对象以 “ { ”  开始，“ } ” 结束。每个“名称”后跟一个 “ : ” ；“名称/值 对”之间使用 “ ,  ”（逗号）分隔。 名称用引号括起来；值如果是字符串则必须用引号括起来，数值型则不需要。如：

var obj={"name":"darren","age":24,"location":"beijing"}  

2. 数组是值（value）的有序集合。一个数组以 “ [ ” 开始， “ ] ” 结束。值之间使用 “ , ” （逗号）分隔。如：

var jsonlist=[{"name":"darren","age":24,"location":"beijing"},{"name":"weidong.nie","age":24,"location":"hunan"}];

对这种数组和对象字面量的操作是非常方便且高效的。如果预先知道JSON结构的情况下，使用JSON进行数据传递简直是太美妙了，可以写出很实用美观可读性强的代码。如果你是纯粹的前台开发人员，一定会非常喜欢JSON。
5. 高效使用HTML标签和CSS样式

基本原理：

HTML是一门用来描述网页的一种语言，它使用标记标签来描述网页，作为一名合格的前端开发，你有必要去知道其常用标签代表的含义(SEO)和属性(表现形式)。

CSS指层叠样式表 (Cascading Style Sheets)，如果说把页面想象成一个人，HTML就是人的骨架，CSS就是人的衣装，一个人的品味从他的衣装就能一目了然。

一名专业的前端开发也是一名优秀的重构，因为在页面中经常会有各种不合理的嵌套和重复定义的CSS样式，我不是要你重构页面，只是希望你在碰到这种情况的时候解决这些问题。如这样的HTML：
1
        <table><tr><td>
2
           <table><tr><td>
3
              ...
4
           </td></tr></table>
5
        </td></tr></table>

或者这样的CSS:

body .box .border ul li p strong span{color:#000}

以上都是对HTML和CSS非常糟糕的使用方法。
正确理解：

HTML是一门标记语言，使用合理的HTML标签前你必须了解其属性，比如Flow Elements，Metadata Elements ，Phrasing Elements。比较基础的就是得知道块级元素和内联元素、盒模型、SEO方面的知识。

CSS是用来渲染页面的，也是存在渲染效率的问题。CSS选择符是从右向左进行匹配的，这里对css选择符按照开销从小到大的顺序梳理一下：

ID选择符 #box

类选择符 .box

标签 div

伪类和伪元素 a:hover

当页面被触发引起回流（reflow）的时候，低效的选择符依然会引发更高的开销，所以请避免低效。
6. 使用CDN加速（内容分发网络）

基本原理：

CDN的全称是Content Delivery Network，即内容分发网络。

"其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。" - 百度百科。

上面几句话有多少能安安心心看完的，所以我还是通过说故事再来介绍一遍吧，顺便补一句，故事出处不明，^_^：

古代打仗大家一定都知道，由于古代的交通很不发达，所以当外族进攻的时候往往不能及时的反击，等朝廷征完兵再把兵派往边境的时候那些侵略者却是早已不见了踪影，这个让古代的帝王很是郁闷。后来帝王们学聪明了，都将大量的兵员提前派往边境驻扎，让他们平时屯田，战时当兵，这样的策略起到了很显著的作用。
不足之处：

实时性不太好是CDN的致命缺陷。随着对CDN需求的逐渐升温，这一缺陷将得到改进，使来自于远程服务器的网络内容网页与复本服务器或缓存器中的网页保持同步。解决方法是在网络内容发生变化时将新的网络内容从服务器端直接传送到缓存器，或者当对网络内容的访问增加时将数据源服务器的网络内容尽可能实时地复制到缓存服务器。 
7. 将CSS和JS放到外部文件中引用，CSS放头，JS放尾
基本原理：

注：这个是很基础且必须遵循的知识点，可是为了文章的完整性勉为其难加进来吧，嘿嘿。

引入外部文件好处是显而易见的，而且是项目稍稍复杂一点的时候就有必要了这样做了。

易维护、易扩展，方便管理和重复利用。
正确的方式：

JavaScript是浏览器中的霸主，为什么这么说，因为在浏览器在执行JavaScript代码时，不能同时做其它事情，即<script>每次出现都会让页面等待脚本的解析和执行（不论JavaScript是内嵌的还是外链的），JavaScript代码执行完成后，才继续渲染页面。这个也就是JavaScript的阻塞特性。

因为这个阻塞的特点，建议把JavaScript代码放到</body>标签以前，这样既能有效的防止JavaScript的阻塞，又能使得页面的HTML结构能更快的释放。

HTML规范清楚指出CSS要放包含在页面的<head>区域内，这里就不多解释了。
8. 精简CSS和JS文件
基本原理：

有一条非常重要的准则一直没有提到，就是CSS和JavaScript的压缩，直接减少下载的文件体积。我个人经常使用的方式是使用 YUI Compressor，它的特点是：移除注释；移除额外的空格；细微优化；标识符替换。

YUI Compressor是java程序，如果你对java很熟悉的话可快速的上手使用yuicompressor.jar；如果你对java很陌生也没关系，一样可以使用YUI Compressor，下面介绍其使用方式。
YUI Compressor的配置和使用：

先配置使用环境：

1.先确保电脑中是否安装了JDK

2.再配置必要的环境变量(细节不能三两句说清，所以不知道如何设置还是搜索吧)

3.在cmd界面，输入javac可测试是否安装成功

使用方法可从cmd到进入yuicompressor.jar所在磁盘，我以自己的yuicompressor-2.4.2.jar为例：

1.压缩JS

java -jar yuicompressor-2.4.2.jar api.js > api.min.js

2.压缩CSS

java -jar yuicompressor-2.4.2.jar style.css > style.min.css

Web前端性能优化

当然，还有另一种更傻瓜式的使用方式，赶兴趣的朋友自己可去多尝试下。
9. 压缩图片和使用图片Sprite技术

基本原理:

注：其实压缩图片和图片精灵是两个方面的技术，可是既然都是关于图片的优化还是放到一块吧。

现在由于工作的细分，专业的前端工程师已经少有机会去切图了，可是关于图片压缩还是得略微了解，一般图片压缩的方式有：

1.缩小图片分辨率；

2.改变图片格式；

3.降低图片保存质量。

关于图片精灵(Sprite)技术就和我们工作直接相关，不管是在CSS中的图片还是在HTML结构中的图片都会产生HTTP请求，前端优化的第一条就是减少请求数，最直接有效的方法是使用图片精灵（CSS Sprite）。图片精灵就是把许多图片放到一张大图片里面，通过CSS来显示图片的一部分。

至于图片精灵的操作细节就不多做介绍了，网上相关内容很多。
10. 注意控制Cookie大小和污染
基本原理和使用方法：

有关Cookie的基础和高级知识可以去看本人写过的一篇文章《JavaScript 操作 Cookie》。

因为Cookie是本地的磁盘文件，每次浏览器都会去读取相应的Cookie，所以建议去除不必要的Coockie，使Coockie体积尽量小以减少对用户响应的影响；

使用Cookie跨域操作时注意在适应级别的域名上设置coockie以便使子域名不受其影响；

Cookie是有生命周期的，所以请注意设置合理的过期时间，合理地Expire时间和不要过早去清除coockie，都会改善用户的响应时间。


渲染机制类
JS运行机制
页面性能
错误监控

业务能力
团队协作能力
事物推动能力
带人能力

职业竞争力
职业规划

有查询知识的能力
有自我获取知识的欲望


connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])

JQ中mouseover和mouseenter的区别:
   mouseover：当鼠标指针位于元素上方时，会发生 mouseover 事件。
   mouseenter:当鼠标指针穿过元素时，会发生 mouseenter 事件。
   mouseenter事件只作用于目标元素，而mouseover最用于目标元素及其后代元素。

