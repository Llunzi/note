Array
	concat() 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。
		参数特点 对象，数组，字符串。。。
		var new_array = old_array.concat(value1[, value2[, ...[, valueN]]])
	values() 方法返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值
	entries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。
		var arr = ["a", "b", "c"]; 
		var iterator = arr.entries();

		/*{value: Array(2), done: false}
		          done:false
		          value:(2) [0, "a"]
		*/
		二维数组按行排序
	find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。
		arr.find(callback[, thisArg])
		如果你需要找到一个元素的位置或者一个元素是否存在于数组中，使用Array.prototype.indexOf() 或 Array.prototype.includes()。
  findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。
  forEach() 方法对数组的每个元素执行一次提供的函数。
  includes() 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。
  indexOf()方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。
  	arr.indexOf(searchElement)
		arr.indexOf(searchElement[, fromIndex = 0])
	join() 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。
	map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。
	pop()方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。
	push() 方法将一个或多个元素添加到数组的末尾，并返回新数组的长度。
	shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。
	unshift() 方法将一个或多个元素添加到数组的开头，并返回新数组的长度。
	arr.unshift(element1, ..., elementN)
	reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。
		arr.reduce(callback[, initialValue])
		callback[accumulator currentValue currentIndex array]
	slice() 方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象。原始数组不会被修改。
	  arr.slice(begin, end);
	sort() 方法用就地（ in-place ）的算法对数组的元素进行排序，并返回数组。
	splice() 方法通过删除现有元素和/或添加新元素来更改一个数组的内容。
	array.splice(start, deleteCount, item1, item2, ...)
	
	
Object构造函数的方法
	Object.assign()
		通过复制一个或多个对象来创建一个新的对象。
	Object.create()
		使用指定的原型对象和属性创建一个新对象。
	Object.freeze()
		冻结对象：其他代码不能删除或更改任何属性。		
	Object.is()
	比较两个值是否相同。所有 NaN 值都相等（这与==和===不同）。
	Object.keys()
	返回一个包含所有给定对象自身可枚举属性名称的数组。
	Object.values()
	返回给定对象自身可枚举值的数组。